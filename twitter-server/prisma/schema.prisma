// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  firstName       String
  lastName        String?
  email           String  @unique
  profileImageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followers Follows[] @relation("follower")
  following Follows[] @relation("following")
  //one user can have many tweets
  tweets    Tweet[]
 
  likedTweet LikedTweet[] 
  comment Comment[]

}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  //one user cannot follow another  user who has already followed them
  @@id([followerId, followingId])
}

model Tweet {
  id       String  @id @default(cuid())
  content  String
  imageUrl String?

  //A tweet must have a user
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes Int @default(0)
  likedTweet LikedTweet[]
  comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LikedTweet {
  tweetId    String
  likedAt    DateTime   @default(now())
  userId     String
  tweet      Tweet      @relation(fields: [tweetId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  
  @@id([tweetId, userId])

}

model Comment {
  id       String  @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship fields
  user    User?     @relation(fields: [userId], references: [id])
  userId  String

  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   String
 
 comments Comment[] @relation("CommentToComment")
 Comment    Comment?  @relation("CommentToComment", fields: [commentId], references:[id])
 commentId  String?
}
